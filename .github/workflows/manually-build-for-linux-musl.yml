name: manually build package for linux-musl

permissions:
  contents: write

on:
  workflow_dispatch:
    inputs:

      package-name:
        description: input the package name to be built
        required: true

      target-arch:
        description: choose a target arch to be built for
        type: choice
        options:
          - x86_64
          - aarch64
          - ppc64le
          - riscv64
          - loongarch64
          - s390x
          - armhf

      profile:
        description: choose a build profile
        type: choice
        options:
          - release
          - debug

      log-level:
        description: choose a log-level
        type: choice
        options:
          - ''
          - '-q'
          - '-v'
          - '-x'

      bundle-type:
        description: choose a bundle type
        type: choice
        options:
          - .tar.xz
          - .tar.lz
          - .tar.gz
          - .tar.bz2
          - .zip
          - .AppImage

      syspm:
        description: use system package manager instaed of uppm
        type: boolean
        default: false

      static:
        description: create fully statically linked executables
        type: boolean
        default: false

      portable:
        description: bundle all needed libraries into the archive
        type: boolean
        default: false

      publish:
        description: publish as GitHub release
        type: boolean
        default: false

      tagname:
        description: GitHub release tagname
        required: false


jobs:

  base:

    runs-on: ubuntu-latest

    steps:
      - id:  prepare
        run: |
          if [ ${{ github.event.inputs.target-arch }} = aarch64 ] ; then
            RUNNER=ubuntu-24.04-arm
          else
            RUNNER=ubuntu-latest
          fi

          printf 'RUNNER=%s\n' "$RUNNER" >> "$GITHUB_OUTPUT"

    outputs:
      runner: ${{ steps.prepare.outputs.RUNNER }}


  build:

    needs: base

    runs-on: ${{ needs.base.outputs.runner }}

    steps:
      - run: curl -LO https://raw.githubusercontent.com/leleliu008/ppkg/master/ppkg
      - run: chmod a+x ppkg

      - name: create run.sh
        run: |
          if [ ${{ github.event.inputs.static }} = true ] ; then
            FSLE=--static
          else
            FSLE=
          fi

          if [ ${{ github.event.inputs.portable }} = true ] ; then
            PORTABLE=--portable
          else
            PORTABLE=
          fi

          if [ ${{ github.event.inputs.syspm }} = true ] ; then
            SYSPM=--syspm
          else
            SYSPM=
          fi

          cat > run.sh <<EOF
          set -e

          COLOR_GREEN='\033[0;32m'        # Green
          COLOR_PURPLE='\033[0;35m'       # Purple
          COLOR_OFF='\033[0m'             # Reset

          echo() {
              printf '%b\n' "\$*"
          }

          run() {
              echo "\${COLOR_PURPLE}==>\${COLOR_OFF} \${COLOR_GREEN}\$@\${COLOR_OFF}"
              eval "\$*"
          }

          run uname -a

          export GITHUB_ACTIONS=true

          run apk update
          run apk add g++ libc-dev linux-headers rust cargo llvm19 clang19-dev

          run ./ppkg setup $SYSPM
          run ./ppkg update

          run ./ppkg install ${{ github.event.inputs.package-name }} --profile=${{ github.event.inputs.profile }} ${{ github.event.inputs.log-level }} $FSLE

          if [ -f           ~/.ppkg/installed/linux-musl-${{ github.event.inputs.target-arch }}/sudo-rs/bin/sudo ] ; then
            chown root:root ~/.ppkg/installed/linux-musl-${{ github.event.inputs.target-arch }}/sudo-rs/bin/sudo
            chmod 4755      ~/.ppkg/installed/linux-musl-${{ github.event.inputs.target-arch }}/sudo-rs/bin/sudo
          fi

          run ./ppkg bundle  ${{ github.event.inputs.package-name }} ${{ github.event.inputs.bundle-type }} $PORTABLE
          EOF

      - run: curl -LO https://raw.githubusercontent.com/alpinelinux/alpine-chroot-install/master/alpine-chroot-install
      - run: chmod +x alpine-chroot-install

      # https://github.com/alpinelinux/alpine-chroot-install/issues/46
      - run: |
          if [ ${{ github.event.inputs.target-arch }} = aarch64 ] ; then
            sed -i '/APK_TOOLS_URI:=/s|x86_64|aarch64|' alpine-chroot-install
            sed -i 's|bdd044e0fd6cc388c5e571e1093efa5f35f7767cc5aa338b0a2576a429009a62|27a975638ddc95a411c9f17c63383e335da9edf6bb7de2281d950c291a11f878|' alpine-chroot-install
          fi

      - run: sudo ./alpine-chroot-install -d /alpine -a ${{ github.event.inputs.target-arch }}

      - run: /alpine/enter-chroot sh run.sh

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.inputs.package-name }}---linux-musl-${{ github.event.inputs.target-arch }}.${{ github.event.inputs.profile }}${{ github.event.inputs.bundle-type }}
          path: '*${{ github.event.inputs.bundle-type }}'


  publish:
    needs: build
    if: github.event.inputs.publish == 'true'

    runs-on: ubuntu-latest

    env:
      GH_TOKEN: ${{ github.token }}

    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: '*'
          path: .
          merge-multiple: true

      - run: ls -a

      # to avaid: failed to run git: fatal: not a git repository (or any of the parent directories): .git
      - run: git -c init.defaultBranch=master init
      - run: git remote add origin ${{ github.repositoryUrl }}

      - run: sha256sum *${{ github.event.inputs.bundle-type }} > notes.md

      - run: |
          if [ -z "${{ github.event.inputs.tagname }}" ] ; then
            TAGNAME="$(ls *${{ github.event.inputs.bundle-type }})"
          else
            TAGNAME=${{ github.event.inputs.tagname }}
          fi

          gh release create "$TAGNAME" *${{ github.event.inputs.bundle-type }} --title "$TAGNAME" --notes-file notes.md
